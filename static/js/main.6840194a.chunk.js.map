{"version":3,"sources":["lib/constants.ts","lib/board.ts","lib/useBoard.ts","components/Title.tsx","lib/useEditMode.ts","components/SVGBoard.tsx","lib/useTimer.ts","components/Controls.tsx","components/BodyText.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CELL_PIXEL_SIZE","CELL_ALIVE_COLOR","yellow","CELL_DEAD_COLOR","pink","generateBoard","rowCount","columnCount","board","iy","ix","useBoard","useState","setBoard","editCell","coord","isAlive","oldBoard","newBoard","length","clone","cloneBoard","y","x","editBoardCell","reset","randomize","Math","random","generateRandomBoard","resolveOneTurn","getNextTurnCell","neighboursCoords","map","coordTuple","isCurrentlyAlive","aliveNeighboursCount","filter","neighbour","cellResolver","row","_isAlive","getNextTurnBoard","useStyles","makeStyles","theme","console","log","palette","primary","main","createStyles","dom","color","life","secondary","Title","classes","Typography","variant","className","useEditMode","onEdit","editMode","setEditMode","onMouseDown","onMouseUp","onMouseEnter","useMemo","debounce","_theme","boardFrame","width","BOARD_COLUMN_COUNT","height","BOARD_ROW_COUNT","border","SVGBoard","onCellEdit","Box","xmlns","fill","style","cursor","useTimer","f","delay","timer","setTimer","stop","useCallback","clearInterval","isRunning","useEffect","start","setInterval","Controls","resetBoard","randomizeBoard","ButtonGroup","Button","onClick","startIcon","Pause","PlayArrow","Delete","Casino","BodyText","gutterBottom","margin","List","dense","ListItem","ListItemText","darkTheme","createMuiTheme","type","App","ThemeProvider","CssBaseline","Container","Grid","container","item","xs","justify","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6840194a.chunk.js","sourcesContent":["import { pink, yellow } from \"@material-ui/core/colors\";\n\nexport const BOARD_ROW_COUNT = 60;\nexport const BOARD_COLUMN_COUNT = 80;\n\nexport const CELL_PIXEL_SIZE = 10;\nexport const BOARD_FRAME_PIXEL_SIZE = 5;\n\nexport const CELL_ALIVE_COLOR = yellow[100];\nexport const CELL_DEAD_COLOR = pink[100];\n\nexport const FRAME_PER_SECOND = 30;\n","export type Board = boolean[][];\nexport type Coord = {\n  x: number;\n  y: number;\n};\n\nconst cloneBoard = (board: Board) => {\n  const rowCount = board.length;\n  const columnCount = board[0].length;\n  const clone: Board = [];\n\n  for (let iy = 0; iy < rowCount; iy++) {\n    clone[iy] = [];\n    for (let ix = 0; ix < columnCount; ix++) {\n      clone[iy][ix] = board[iy][ix];\n    }\n  }\n\n  return clone;\n};\n\nexport const generateBoard = (rowCount: number, columnCount: number) => {\n  const board: Board = [];\n\n  for (let iy = 0; iy < rowCount; iy++) {\n    board[iy] = [];\n    for (let ix = 0; ix < columnCount; ix++) {\n      board[iy][ix] = false;\n    }\n  }\n\n  return board;\n};\n\nexport const generateRandomBoard = (rowCount: number, columnCount: number) => {\n  const board: Board = [];\n\n  for (let iy = 0; iy < rowCount; iy++) {\n    board[iy] = [];\n    for (let ix = 0; ix < columnCount; ix++) {\n      board[iy][ix] = Math.random() < 0.5;\n    }\n  }\n\n  return board;\n};\n\nexport const editBoardCell = (board: Board, coord: Coord, isAlive: boolean) => {\n  const newBoard = cloneBoard(board);\n  newBoard[coord.y][coord.x] = isAlive;\n\n  return newBoard;\n};\n\nconst cellResolver =\n  (board: Board) =>\n  ({ x, y }: Coord): boolean => {\n    // prettier-ignore\n    const neighboursCoords: Coord[] = [\n      [x-1, y-1], [x, y-1], [x+1, y-1],\n      [ x-1, y ],           [ x+1, y ],\n      [x-1, y+1], [x, y+1], [x+1, y+1]\n    ].map(coordTuple => ({x: coordTuple[0], y: coordTuple[1]}));\n\n    const isCoordInBoard = (coord: Coord) =>\n      coord.x >= 0 &&\n      coord.y >= 0 &&\n      coord.x < board[0].length &&\n      coord.y < board.length;\n\n    const isCurrentlyAlive = board[y][x];\n\n    const aliveNeighboursCount = neighboursCoords\n      .filter(isCoordInBoard)\n      .map(({ x, y }) => board[y][x]) // get all neighbours\n      .filter((neighbour) => neighbour === true).length; // count alive ones\n\n    const isAliveNextTurn = isCurrentlyAlive\n      ? aliveNeighboursCount === 2 || aliveNeighboursCount === 3\n      : aliveNeighboursCount === 3;\n\n    return isAliveNextTurn;\n  };\n\nexport const getNextTurnBoard = (board: Board): Board => {\n  const getNextTurnCell = cellResolver(board);\n  const nextCells = board.map((row, iy) =>\n    row.map((_isAlive, ix) => getNextTurnCell({ x: ix, y: iy }))\n  );\n\n  return nextCells;\n};\n","import { useState } from \"react\";\nimport {\n  Coord,\n  generateBoard,\n  generateRandomBoard,\n  editBoardCell,\n  getNextTurnBoard,\n} from \"./board\";\nimport { BOARD_COLUMN_COUNT, BOARD_ROW_COUNT } from \"./constants\";\n\nconst useBoard = () => {\n  const [board, setBoard] = useState(\n    generateBoard(BOARD_ROW_COUNT, BOARD_COLUMN_COUNT)\n  );\n\n  const editCell = (coord: Coord, isAlive: boolean) => {\n    setBoard((oldBoard) => editBoardCell(oldBoard, coord, isAlive));\n  };\n\n  const reset = () => {\n    setBoard(() => generateBoard(BOARD_ROW_COUNT, BOARD_COLUMN_COUNT));\n  };\n\n  const randomize = () => {\n    setBoard(() => generateRandomBoard(BOARD_ROW_COUNT, BOARD_COLUMN_COUNT));\n  };\n\n  const resolveOneTurn = () => {\n    setBoard((oldBoard) => getNextTurnBoard(oldBoard));\n  };\n\n  return { board, editCell, reset, randomize, resolveOneTurn };\n};\n\nexport default useBoard;\n","import React from \"react\";\nimport { createStyles, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => {\n  console.log(theme.palette.primary.main);\n  return createStyles({\n    dom: {\n      color: theme.palette.primary.main,\n    },\n    life: {\n      color: theme.palette.secondary.main,\n    },\n  });\n});\n\nconst Title: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Typography variant=\"h2\">\n      <span>{\"<\"}</span>\n      <span className={classes.dom}>{\"DOM\"}</span>\n      <span>{\"Of\"}</span>\n      <span className={classes.life}>{\"Life\"}</span>\n      <span>{\" />\"}</span>\n    </Typography>\n  );\n};\n\nexport default Title;\n","import { useMemo, useState } from \"react\";\nimport { debounce } from \"lodash\";\n\nimport { Coord } from \"./board\";\n\ntype EditMode = \"none\" | \"draw\" | \"erase\";\n\nconst useEditMode = (onEdit: Function) => {\n  const [editMode, setEditMode] = useState<EditMode>(\"none\");\n\n  const onMouseDown = (coord: Coord, isAlive: boolean) => {\n    setEditMode(isAlive ? \"erase\" : \"draw\");\n    onEdit(coord, !isAlive);\n  };\n\n  const onMouseUp = () => {\n    setEditMode(\"none\");\n  };\n\n  const onMouseEnter = useMemo(\n    () =>\n      debounce((coord) => {\n        if (editMode === \"none\") return;\n\n        onEdit(coord, editMode === \"draw\");\n      }, 1),\n    [editMode, onEdit]\n  );\n\n  return { onMouseDown, onMouseUp, onMouseEnter };\n};\n\nexport default useEditMode;\n","import React from \"react\";\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\";\n\nimport {\n  BOARD_COLUMN_COUNT,\n  BOARD_FRAME_PIXEL_SIZE,\n  BOARD_ROW_COUNT,\n  CELL_ALIVE_COLOR,\n  CELL_DEAD_COLOR,\n  CELL_PIXEL_SIZE,\n} from \"../lib/constants\";\nimport { Board } from \"../lib/board\";\nimport useEditMode from \"../lib/useEditMode\";\n\nconst useStyles = makeStyles((_theme) =>\n  createStyles({\n    boardFrame: {\n      width: `${\n        BOARD_COLUMN_COUNT * CELL_PIXEL_SIZE + BOARD_FRAME_PIXEL_SIZE * 2\n      }px`,\n      height: `${\n        BOARD_ROW_COUNT * CELL_PIXEL_SIZE + BOARD_FRAME_PIXEL_SIZE * 2\n      }px`,\n      border: `${BOARD_FRAME_PIXEL_SIZE}px solid #fff`,\n    },\n  })\n);\n\ninterface SVGBoardProps {\n  board: Board;\n  onCellEdit: Function;\n}\n\nconst SVGBoard: React.FC<SVGBoardProps> = ({ board, onCellEdit }) => {\n  const classes = useStyles();\n  const { onMouseDown, onMouseUp, onMouseEnter } = useEditMode(onCellEdit);\n\n  return (\n    <Box className={classes.boardFrame}>\n      <svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n        {board.map((row, iy) =>\n          row.map((isAlive, ix) => (\n            <rect\n              key={`${ix}${iy}`}\n              x={ix * CELL_PIXEL_SIZE}\n              y={iy * CELL_PIXEL_SIZE}\n              width={CELL_PIXEL_SIZE}\n              height={CELL_PIXEL_SIZE}\n              fill={isAlive ? CELL_ALIVE_COLOR : CELL_DEAD_COLOR}\n              style={{ cursor: \"pointer\" }}\n              onMouseDown={() => onMouseDown({ x: ix, y: iy }, isAlive)}\n              onMouseEnter={() => onMouseEnter({ x: ix, y: iy })}\n              onMouseUp={() => onMouseUp()}\n            />\n          ))\n        )}\n      </svg>\n    </Box>\n  );\n};\n\nexport default SVGBoard;\n","import { useCallback, useEffect, useState } from \"react\";\n\nconst useTimer = (f: Function, delay: number) => {\n  const [timer, setTimer] = useState<null | number>(null);\n\n  const start = () => {\n    if (timer) return;\n    setTimer(setInterval(f, delay));\n  };\n\n  const stop = useCallback(() => {\n    if (!timer) return;\n    clearInterval(timer);\n    setTimer(null);\n  }, [timer]);\n\n  const isRunning: boolean = timer != null;\n\n  useEffect(() => stop, [stop]);\n\n  return { start, stop, isRunning };\n};\n\nexport default useTimer;\n","import { Button, ButtonGroup } from \"@material-ui/core\";\nimport { Casino, Delete, Pause, PlayArrow } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { FRAME_PER_SECOND } from \"../lib/constants\";\nimport useTimer from \"../lib/useTimer\";\n\ninterface ControlsProps {\n  resetBoard: Function;\n  randomizeBoard: Function;\n  resolveOneTurn: Function;\n}\n\nconst Controls: React.FC<ControlsProps> = ({\n  resetBoard,\n  randomizeBoard,\n  resolveOneTurn,\n}) => {\n  const { start, stop, isRunning } = useTimer(() => {\n    resolveOneTurn();\n  }, 1000 / FRAME_PER_SECOND);\n\n  const onPlayButtonClick = () => {\n    isRunning ? stop() : start();\n  };\n\n  return (\n    <ButtonGroup color=\"default\">\n      <Button\n        onClick={onPlayButtonClick}\n        variant=\"contained\"\n        startIcon={isRunning ? <Pause /> : <PlayArrow />}\n      >\n        {isRunning ? \"pause\" : \"play\"}\n      </Button>\n      <Button\n        variant=\"contained\"\n        startIcon={<Delete />}\n        onClick={() => resetBoard()}\n      >\n        reset\n      </Button>\n      <Button\n        variant=\"contained\"\n        startIcon={<Casino />}\n        onClick={() => randomizeBoard()}\n      >\n        randomize\n      </Button>\n    </ButtonGroup>\n  );\n};\n\nexport default Controls;\n","import {\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst BodyText: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\">Conway's game of life running in dom</Typography>\n      <Typography gutterBottom variant=\"subtitle1\">\n        A simple, yet surprising, cellular automaton. A no player game\n        determined by its initial state.\n      </Typography>\n      <Box margin=\"16px\"></Box>\n      <Typography variant=\"h6\">How to set initial state ?</Typography>\n      <List dense>\n        <ListItem>\n          <ListItemText primary=\"1. Click on randomize or draw directly on the board.\" />\n        </ListItem>\n        <ListItem>\n          <ListItemText primary=\"2. Press play and observe, or continue to draw to change some determined lifes. :)\" />\n        </ListItem>\n      </List>\n    </Box>\n  );\n};\n\nexport default BodyText;\n","import React from \"react\";\nimport {\n  Container,\n  createMuiTheme,\n  CssBaseline,\n  Grid,\n  ThemeProvider,\n  Typography,\n} from \"@material-ui/core\";\n\nimport { CELL_ALIVE_COLOR, CELL_DEAD_COLOR } from \"../lib/constants\";\nimport useBoard from \"../lib/useBoard\";\nimport Title from \"./Title\";\nimport SVGBoard from \"./SVGBoard\";\nimport Controls from \"./Controls\";\nimport BodyText from \"./BodyText\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: CELL_ALIVE_COLOR,\n    },\n    secondary: {\n      main: CELL_DEAD_COLOR,\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  const { board, editCell, reset, randomize, resolveOneTurn } = useBoard();\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Container style={{ height: \"100vh\" }}>\n        <Grid container style={{ height: \"100%\" }}>\n          <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\n            <Title />\n          </Grid>\n          <Grid container item xs={12} justify=\"center\" alignItems=\"flex-start\">\n            <SVGBoard board={board} onCellEdit={editCell} />\n          </Grid>\n          <Grid container item xs={12} justify=\"center\" alignItems=\"flex-start\">\n            <Controls\n              resetBoard={reset}\n              randomizeBoard={randomize}\n              resolveOneTurn={resolveOneTurn}\n            />\n          </Grid>\n          <Grid container item xs={12} justify=\"center\" alignItems=\"flex-start\">\n            <BodyText />\n          </Grid>\n          <Grid container item xs={12} justify=\"center\" alignItems=\"flex-end\">\n            <Typography>♥</Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}